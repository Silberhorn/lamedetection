#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int argc, char* argv[]){
 	//Open the default video camera
	VideoCapture cap(0);

 	// if not success, exit program
	 if (!cap.isOpened())  {
 		cout << "Cannot open the video camera" << endl;
  		cin.get(); //wait for any key press
  		return -1;
 	}

 	double dWidth = cap.get(CV_CAP_PROP_FRAME_WIDTH); //get the width of frames of the video
 	double dHeight = cap.get(CV_CAP_PROP_FRAME_HEIGHT); //get the height of frames of the video

 	string window_name = "Fahrzeug Kamera";
 	namedWindow(window_name); //create a window called "Fahrzeug Kamera"

 	while (true){
 		Mat frame;
  		bool bSuccess = cap.read(frame); // read a new frame from video

		//Breaking the while loop if the frames cannot be captured
  		if (bSuccess == false) {
   			cout << "Video camera is disconnected" << endl;
   			cin.get(); //Wait for any key press
   			break;
  		}

  		//show the frame in the created window
  		imshow(window_name, frame);

  		//wait for for 10 ms until any key is pressed.
  		//If the 'Esc' key is pressed, break the while loop.
  		//If the any other key is pressed, continue the loop
  		//If any key is not pressed withing 10 ms, continue the loop
  		if (waitKey(10) == 27){
   			cout << "Esc key is pressed by user. Stoppig the video" << endl;
   			break;
  		}
 	}
 	return 0;
}


 int iLowH = 0;
 int iHighH = 179;

 int iLowS = 0; 
 int iHighS = 255;

 int iLowV = 0;
 int iHighV = 255;

 //Create trackbars in "Control" window
 cvCreateTrackbar("LowH", "Control", &iLowH, 179); //Hue (0 - 179)
 cvCreateTrackbar("HighH", "Control", &iHighH, 179);



 cvCreateTrackbar("LowS", "Control", &iLowS, 255); //Saturation (0 - 255)
 cvCreateTrackbar("HighS", "Control", &iHighS, 255);

 cvCreateTrackbar("LowV", "Control", &iLowV, 255); //Value (0 - 255)
 cvCreateTrackbar("HighV", "Control", &iHighV, 255);

    while (true)
    {
        Mat imgOriginal;

        bool bSuccess = cap.read(imgOriginal); // read a new frame from video

         if (!bSuccess) //if not success, break loop
        {
             cout << "Cannot read a frame from video stream" << endl;
             break;
        }

   Mat imgHSV;

  cvtColor(imgOriginal, imgHSV, COLOR_BGR2HSV); //Convert the captured frame from BGR to HSV
 
  Mat imgThresholded;

  inRange(imgHSV, Scalar(iLowH, iLowS, iLowV), Scalar(iHighH, iHighS, iHighV), imgThresholded); //Threshold the image
      
  //morphological opening (remove small objects from the foreground)


  erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) );
  dilate( imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) ); 

  //morphological closing (fill small holes in the foreground)
  dilate( imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) ); 
  erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) );

  imshow("Thresholded Image", imgThresholded); //show the thresholded image


  imshow("Original", imgOriginal); //show the original image
